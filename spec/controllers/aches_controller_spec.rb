require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AchesController, type: :controller do 

  # This should return the minimal set of attributes required to create a valid
  # Ach. As you add validations to Ach, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { @ach = create(:ach) }

  let(:invalid_attributes) { @ach = build(:ach, :invalid) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AchesController. Be sure to keep this updated too.
  let(:valid_session) { @user = create(:user) }

  describe "GET #index" do
    # Sign in an admin to see Aches Index page
    before(:each) do
      @admin = create(:admin)
      sign_in @admin
    end

    it "assigns all aches as @aches" do
      ach = create(:ach)
      get :index
      expect(assigns(:aches)).to eq([ach])
    end

    it "renders the :index view" do
      get :index
      expect(response).to render_template :index
    end
  end
  
  # Sign in a user for the rest of the tests
  before (:each) do
    @user = create(:user)
    sign_in @user
  end 

  describe "GET #show" do
    it "assigns the requested ach as @ach" do
      ach = create(:ach)
      get :show, id: ach
      expect(assigns(:ach)).to eq(ach)
    end

    it "renders the :show view" do
      get :show, id: create(:ach)
      expect(response).to render_template :show
    end
  end

  describe "GET #new" do
    it "assigns a new ach as @ach" do
      get :new
      expect(assigns(:ach)).to be_a_new(Ach)
    end

    it "renders the :new view" do
      get :new
      expect(response).to render_template :new
    end
  end

  describe "GET #edit" do
    it "assigns the requested ach as @ach" do
      ach = create(:ach)
      get :edit, id: ach
      expect(assigns(:ach)).to eq(ach)
    end

    it "renders the :edit view" do
      ach = create(:ach)
      get :edit, id: ach
      expect(response).to render_template :edit
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Ach" do
        expect {
          post :create, ach: attributes_for(:ach)
        }.to change(Ach, :count).by(1)
      end

      it "assigns a newly created ach as @ach" do
        post :create, ach: attributes_for(:ach)
        expect(assigns(:ach)).to be_a(Ach)
        expect(assigns(:ach)).to be_persisted
      end

      it "redirects to the user profile" do
        post :create, ach: attributes_for(:ach)
        expect(response).to redirect_to(@user)
      end
    end

    context "with invalid params" do
      it "does not save the new ach" do
        expect {
          post :create, ach: attributes_for(:ach, :invalid)
          }.to_not change(Ach, :count)
      end

      it "assigns a newly created but unsaved ach as @ach" do
        post :create, ach: attributes_for(:ach, :invalid)
        expect(assigns(:ach)).to be_a_new(Ach)
      end

      it "re-renders the 'new' template" do
        post :create, ach: attributes_for(:ach, :invalid)
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      @ach = create(:ach, legalname: "Smith's Bongs")
    end

    context "with valid params" do
      it "updates the requested ach" do
        put :update, id: @ach, ach: attributes_for(:ach, legalname: "Bones' Bongs")
        @ach.reload
        expect(@ach.legalname).to eq("Bones' Bongs")
      end

      it "locates the requested @ach" do
        put :update, id: @ach, ach: attributes_for(:ach)
        expect(assigns(:ach)).to eq(@ach)
      end

      it "redirects to the user profile" do
        put :update, id: @ach.to_param, ach: attributes_for(:ach)
        expect(response).to redirect_to(@user)
      end
    end

    context "with invalid params" do
      it "locates the requested @ach" do
        put :update, id: @ach, ach: attributes_for(:ach, :invalid)
        expect(assigns(:ach)).to eq(@ach)
      end

      it "does not change @ach's attributes" do
        put :update, id: @ach, ach: attributes_for(:ach, :invalid)
        @ach.reload
        expect(@ach.legalname).to_not eq("Bones' Bongs")
      end

      it "re-renders the 'edit' template" do
        put :update, id: @ach, ach: attributes_for(:ach, :invalid)
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      @ach = create(:ach)
    end

    it "deletes the requested ach" do
      expect {
        delete :destroy, id: @ach
      }.to change(Ach, :count).by(-1)
    end

    it "redirects to the user profile" do
      delete :destroy, id: @ach
      expect(response).to redirect_to(@user)
    end

    it "redirects to the aches #index" do
      @admin = create(:admin)
      sign_in @admin
      delete :destroy, id: @ach
      expect(response).to redirect_to aches_url
    end
  end

end
